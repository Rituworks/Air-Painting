import cv2
import mediapipe as mp0
import numpy as np
import time

# Initialize MediaPipe Hands
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands(
    max_num_hands=1,
    min_detection_confidence=0.7,
    min_tracking_confidence=0.7
)

# Video capture
cap = cv2.VideoCapture(0)

# Variables
canvas = None
prev_x, prev_y = None, None
draw_color = (0, 0, 255)  # Default red
brush_thickness = 5
last_time = time.time()
fps = 0

# Color palette positions
colors = [(0, 0, 255), (0, 255, 0), (255, 0, 0), (0, 255, 255), (255, 0, 255)]
color_rects = [(i * 60 + 20, 20, i * 60 + 70, 70) for i in range(len(colors))]
clear_button = (len(colors) * 60 + 40, 20, len(colors) * 60 + 140, 70)

while cap.isOpened():
    success, frame = cap.read()
    if not success:
        break

    frame = cv2.flip(frame, 1)

    if canvas is None:
        canvas = np.zeros_like(frame)

    # FPS calculation
    current_time = time.time()
    fps = 1 / (current_time - last_time)
    last_time = current_time

    # Draw UI elements
    for i, (x1, y1, x2, y2) in enumerate(color_rects):
        cv2.rectangle(frame, (x1, y1), (x2, y2), colors[i], -1)

    cv2.rectangle(frame, (clear_button[0], clear_button[1]), (clear_button[2], clear_button[3]), (200, 200, 200), -1)
    cv2.putText(frame, "CLEAR", (clear_button[0] + 5, clear_button[1] + 35), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2)

    cv2.putText(frame, f"FPS: {int(fps)}", (10, frame.shape[0] - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)

    # Hand detection
    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    result = hands.process(rgb_frame)

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            h, w, _ = frame.shape
            index_tip = hand_landmarks.landmark[8]
            x, y = int(index_tip.x * w), int(index_tip.y * h)

            # Draw fingertip
            cv2.circle(frame, (x, y), 8, draw_color, -1)

            # Check for UI interaction
            for i, (x1, y1, x2, y2) in enumerate(color_rects):
                if x1 < x < x2 and y1 < y < y2:
                    draw_color = colors[i]
                    prev_x, prev_y = None, None  # prevent lines when selecting
            if clear_button[0] < x < clear_button[2] and clear_button[1] < y < clear_button[3]:
                canvas = np.zeros_like(frame)
                prev_x, prev_y = None, None

            # Drawing mode
            if prev_x is not None and prev_y is not None:
                speed = int(np.hypot(x - prev_x, y - prev_y))
                thickness = min(20, max(5, speed // 2))  # adaptive brush
                cv2.line(canvas, (prev_x, prev_y), (x, y), draw_color, thickness)

            prev_x, prev_y = x, y
            mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
    else:
        prev_x, prev_y = None, None

    # Combine drawings
    combined = cv2.addWeighted(frame, 0.7, canvas, 0.3, 0)

    cv2.imshow("Hand Gesture Drawing", combined)

    key = cv2.waitKey(1) & 0xFF
    if key == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
